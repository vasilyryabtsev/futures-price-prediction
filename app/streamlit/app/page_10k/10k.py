import streamlit as st
import requests
import pandas as pd
import matplotlib.pyplot as plt
import logging

logger = logging.getLogger('page_10k')


@st.cache_data
def upload_data(path: str) -> pd.DataFrame:
    '''
    –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞.
    '''
    logger.info('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ')

    return pd.read_csv(path)


def plot_MDA_distribution(data):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª–∏–Ω—ã —Ä–∞–∑–¥–µ–ª–∞ MDA.
    """
    plt.figure(figsize=(8, 5))
    plt.hist(data['full_content_length'], bins=20, alpha=0.7)
    plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Ä–∞–∑–¥–µ–ª–∞ MDA –æ—Ç—á–µ—Ç–æ–≤ 10-K')
    plt.xlabel('–î–ª–∏–Ω–∞ (—Å–∏–º–≤–æ–ª–æ–≤)')
    plt.grid()
    
    logger.info('–ü–æ—Å—Ç—Ä–æ–µ–Ω–∞ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è')

    return plt


def boxplot_MDA_length(data):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è boxplot –¥–ª—è –¥–ª–∏–Ω—ã —Ä–∞–∑–¥–µ–ª–∞ MDA.
    """
    plt.figure(figsize=(8, 5))
    plt.boxplot(data['full_content_length'])
    plt.title('–î–ª–∏–Ω–∞ —Ä–∞–∑–¥–µ–ª–∞ MDA –æ—Ç—á–µ—Ç–æ–≤ 10-K –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–Ω–∞—á–µ–Ω–∏—è —Ç–∞—Ä–≥–µ—Ç–∞')
    plt.ylabel('–î–ª–∏–Ω–∞ (—Å–∏–º–≤–æ–ª–æ–≤)')
    plt.grid()

    logger.info('–ü–æ—Å—Ç—Ä–æ–µ–Ω boxplot')

    return plt


def hist_target_dist(data):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π —Å —Ä–∞–∑–Ω–æ–π —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π.
    """
    plt.figure(figsize=(8, 5))
    plt.hist(data['target_10_index'], bins=3, alpha=0.7)
    plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π')
    plt.xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π')
    plt.grid()
    
    logger.info('–ü–æ—Å—Ç—Ä–æ–µ–Ω–∞ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π —Å —Ä–∞–∑–Ω–æ–π —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π')

    return plt


def get_unique_tickers(data):
    '''
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –Ω–∏–º.
    '''
    report_counts = data['ticker'].value_counts().reset_index()
    report_counts.columns = ['–¢–∏–∫–µ—Ä', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—á–µ—Ç–æ–≤']

    logger.info('–í–æ–∑–≤—Ä–∞—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤')

    return report_counts


def eda():
    '''
    –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–∑–≤–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö.
    '''
    logger.info('–í—ã–∑–≤–∞–Ω EDA')

    st.header("EDA")

    data = upload_data('page_10k/final.csv')
    data['full_content_length'] = data['MDA'].apply(len)
    st.write('1. –°–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –∞–Ω–∞–ª–∏–∑')
    tickers = get_unique_tickers(data)
    st.table(tickers)
    st.write('2. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Ä–∞–∑–¥–µ–ª–∞ MDA –æ—Ç—á–µ—Ç–æ–≤ 10K')
    fig_len = plot_MDA_distribution(data)
    st.pyplot(fig_len)
    st.write('3. Boxplot –¥–ª–∏–Ω—ã —Ä–∞–∑–¥–µ–ª–∞ MDA –æ—Ç—á–µ—Ç–æ–≤ 10K –ø–æ —Ç–∞—Ä–≥–µ—Ç—É')
    bp_len = boxplot_MDA_length(data)
    st.pyplot(bp_len)
    st.write('4. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π')
    dist_len = hist_target_dist(data)
    st.pyplot(dist_len)


@st.cache_data
def get_params():
    '''
    –ü–æ–ª—É—á–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏.
    '''
    api_url = 'http://service_10k:8001/get_params'
    try:
        response = requests.get(api_url)
        response.raise_for_status()
        logger.info('–ü–æ–ª—É—á–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏')
        return response.json()
    except requests.exceptions.RequestException as e:
        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–∏—Å—É: {e}")
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {str(e)}")
        return {}


def model_params():
    '''
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏.
    '''
    st.image('eda_10k/ROC_AUC.png', caption='–ì—Ä–∞—Ñ–∏–∫ ROC –∫—Ä–∏–≤–æ–π')
    params = get_params()
    logger.info('–û—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏')
    if params:
        param_df = pd.DataFrame(list(params.items()),
                                columns=["–ü–∞—Ä–∞–º–µ—Ç—Ä", "–ó–Ω–∞—á–µ–Ω–∏–µ"])

        st.table(param_df)


def file_prev(uploaded_file):
    '''
    –í—ã–≤–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
    '''
    content = uploaded_file.read().decode("utf-8")

    st.text_area(uploaded_file.name, content, height=300)


@st.cache_data
def get_predict(uploaded_file):
    '''
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –º–æ–¥–µ–ª–∏.
    '''
    api_url = "http://service_10k:8001/report_prediction"
    files = {"file": (uploaded_file.name, uploaded_file.getvalue())}
    try:
        response = requests.post(api_url, files=files)
        response.raise_for_status()
        logger.info('–í–æ–∑–≤—Ä–∞—â–µ–Ω –ø—Ä–æ–≥–Ω–æ–∑')
        return response.json()
    except requests.exceptions.RequestException as e:
        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–∏—Å—É: {e}")
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å –ø—Ä–æ–≥–Ω–æ–∑: {str(e)}")
        return {}


def model_prediction():
    '''
    –ü—Ä–æ–≥–Ω–æ–∑ –º–æ–¥–µ–ª–∏.
    '''
    uploaded_file = st.file_uploader('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª', type='txt')
    if uploaded_file:
        file_prev(uploaded_file)
        pred = get_predict(uploaded_file)
        if len(pred) > 0:
            st.write(f"üü•: {pred['negative_probability']}")
            st.write(f"üü©: {pred['positive_probability']}")
        else:
            st.write("üü•: 0.0")
            st.write("üü©: 0.0")
    logger.info('–û—Ç–æ–±—Ä–∞–∂–µ–Ω –ø—Ä–æ–≥–Ω–æ–∑')


def render_page():
    '''
    –†–µ–Ω–¥–µ—Ä–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É.
    '''
    check_eda = st.checkbox('EDA')
    if check_eda:
        eda()

    check_params = st.checkbox('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏')
    if check_params:
        model_params()

    check_prediction = st.checkbox('–ü—Ä–æ–≥–Ω–æ–∑ –º–æ–¥–µ–ª–∏')
    if check_prediction:
        model_prediction()
